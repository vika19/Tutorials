{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 The Life-Changing Magic of Tidying Up Your Files\
\
It happens to everyone.  You start with a nice, clean space on the cluster.  If it\'92s your first round of managing projects on a cluster, your directory goes quickly to the way of the wild wild west.  If its not, you start with some well intentioned folders and then a grant deadline, paper submission, or coffee addled night before a lab meeting hits and suddenly you are in a mess of weirdly named files.\
\
\pard\pardeftab720\sl457\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
But its a disaster now, what do I do?\
Finding files can be quite a task when you have a mature bramble of a directory.  So here are two EXTREMELY useful tools:\
If you know something about the file name/type/location:\
	find <location to start> <options>\
\
Typical ways to use find:\
I want to find a file somewhere in $HOME.  I know it is called test.txt.\
	find $HOME -name test.txt\
\
I want to find a file somewhere in $HOME.  I know it is called test.txt, but there is an ENORMOUS folder tree called \'93rabbits_hole\'94 that I don\'92t need to search through:\
	find $HOME -depth 4 -name test.txt 	#will only search four folders deep in any subduer\
\
I want to find all directories in $HOME. \
	find $HOME -type d\
\
I want to get see the number of sequences in every fasta file:\
	find $HOME/projects -name *.fasta -exec grep -c \'93>\'94 \{\} \\;		#exec will execute whatever you put after it, replacing \{\} with the file name.  This needs the \'93 \\;\'94 (with the space!) to work.\
\
If you don\'92t remember the name/location of the file:\
Say you want to know in which file the sequences for \'93sample10\'94 are stored.  \
You can try:	\
grep \'93sample10\'94 * \
but this won\'92t look beyond the current directory\
grep \'93sample 10\'94 $Home/*\
This will work for a depth of 1\'85\
However, grep has a -d option, that allows you to define what you do when grep hits a directory.  \
grep -d recurse \'93sample 10\'94 $HOME/*\
Now you can find any file with CONTENTS that match your search!\
\
To avoid this being a constant problem, you need to clean up!\
Step 1: useful folder structure\
In your home directory, there are a couple of directories that are useful to have.  The first thing I always create in a new space are the following:\
	local - I use this as my default local installation folder.  When doing ./configure \'97prefix=\'85 I use this location as the prefix.  Why? Because most programs are written to automatically use the same general subdirectories (src, bin, man, share, lib) and will use existing directories if they already exist in local.  That automatically makes finding things easier.  Another benefit?  I only have to add ~/local/bin to my PATH and everything is there.  \
	projects - to have subdirectories for each project. Even if they are somewhere else (dc2/projects on Mason for instance) I link them here, so I know where they are.\
	shared - a place that holds subfolders that are visible to others for sharing data for projects, collaborations, etc.\
	data - I usually need test data for software, short runs of stuff, etc.  Its a good idea to have some nice, clean, small dummy data of any common types that you work on so you can troubleshoot software without having to dig for some.\
\
Step 2: discarding first\
A) if you don\'92t know what it is\
	If you cannot figure out what a file is or what it refers to, you may want to get rid of it.  Alternatively, if you are terrified of deleting files as many people are, make a separate folder in your $HOME called something like \'93mysteries\'94, put the original path in the first line of the file, and then move it there (then if you figure out what the original folder did, you can search with grep -d to find all the original contents!).  But if you don\'92t know what it is, or have a good idea of how to find out, it will likely never be useful to you.  \
\
B) if you just need to store it\
	If you have files hanging about just for storage sake - archive.  Tar and zip files that aren\'92t in use, or just push them to the archive <link>\
\
Step 3: piped folders\
A useful set up in your project directories is to have directory trees as pipelines.  What I mean by this is to have a subfolder for each subsequent analysis.  You may see something like:\
$HOME/projects/salamander_expression/raw/trimmed/mapped/Condition1.voom/\
and know exactly what was done to those files.  If you want to get really considerate of your future self, you could do one better with:\
$HOME/projects/salamander_expression/raw/trimmomatic3.0/bowtie2.2/Condition1.voom/\
and then have what VERSION you used known (which is super important in writing publications!).\
Having file structure like this is also very helpful when archiving or retrieving archives - you can just pull the level of analyses you need and not worry about having to transfer and dig through an entire experiment\'92s worth of analysis.  \
\
Step 4: READMEs\
	Write READMEs.  There should be one in each analyses folder with the code you used, versions you used, any notes that are helpful.  These are invaluable to others sharing your data and to your future self.  They are also extremely helpful when archiving - if the README is included, you don\'92t have to figure out whatever cryptology inspired your file names six months down the line.}